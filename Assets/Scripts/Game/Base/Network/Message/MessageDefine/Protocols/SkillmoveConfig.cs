// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: skillmove_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkillmoveConfig {

  /// <summary>Holder for reflection information generated from skillmove_config.proto</summary>
  public static partial class SkillmoveConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for skillmove_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SkillmoveConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZza2lsbG1vdmVfY29uZmlnLnByb3RvEhBza2lsbG1vdmVfY29uZmlnGhVz",
            "a2lsbG5ld19jb25maWcucHJvdG8igwYKDnNraWxsbW92ZV9kYXRhEg8KAmxk",
            "GAEgASgNSACIAQESPAoNTW92ZVJlbGF5VHlwZRgCIAEoDjIgLnNraWxsbW92",
            "ZV9jb25maWcuRU1vdmVSZWxheVR5cGVIAYgBARJIChNNb3ZlU3BlZWRDaGFu",
            "Z2VUeXBlGAMgASgOMiYuc2tpbGxtb3ZlX2NvbmZpZy5FTW92ZVNwZWVkQ2hh",
            "bmdlVHlwZUgCiAEBEhQKB0tlZXBEaXIYBCABKAhIA4gBARI6CgpDaGVja0Js",
            "b2NrGAUgASgOMiEuc2tpbGxtb3ZlX2NvbmZpZy5FTW92ZUNoZWNrQmxvY2tI",
            "BIgBARISCgVJc0ZseRgGIAEoCEgFiAEBEhQKB0lzRmxhc2gYByABKAhIBogB",
            "ARIWCglGbHlIZWlnaHQYCCABKAVIB4gBARI0CgVSYW5nZRgJIAEoDjIgLnNr",
            "aWxsbmV3X2NvbmZpZy5FU2tpbGxSYW5nZVR5cGVICIgBARIzCgRXaXRoGAog",
            "ASgOMiAuc2tpbGxuZXdfY29uZmlnLkVTa2lsbFJhbmdlVHlwZUgJiAEBEhcK",
            "ClJhbmdlVmFsdWUYCyABKAVICogBARJACg1Nb3ZlU3BlZWRUeXBlGAwgASgO",
            "MiQuc2tpbGxuZXdfY29uZmlnLkVTa2lsbE1vdmVTcGVlZFR5cGVIC4gBARIb",
            "Cg5Nb3ZlU3BlZWRWYWx1ZRgNIAEoBUgMiAEBEhkKDFZlcnRpY2FsVGltZRgO",
            "IAEoBUgNiAEBQgUKA19sZEIQCg5fTW92ZVJlbGF5VHlwZUIWChRfTW92ZVNw",
            "ZWVkQ2hhbmdlVHlwZUIKCghfS2VlcERpckINCgtfQ2hlY2tCbG9ja0IICgZf",
            "SXNGbHlCCgoIX0lzRmxhc2hCDAoKX0ZseUhlaWdodEIICgZfUmFuZ2VCBwoF",
            "X1dpdGhCDQoLX1JhbmdlVmFsdWVCEAoOX01vdmVTcGVlZFR5cGVCEQoPX01v",
            "dmVTcGVlZFZhbHVlQg8KDV9WZXJ0aWNhbFRpbWUi0gEKCWNvbnRhaW5lchIR",
            "CgRuYW1lGAEgASgJSACIAQESFQoIYnVpbGRfaWQYAiABKAVIAYgBARI1CgVp",
            "bmZvcxgDIAMoCzImLnNraWxsbW92ZV9jb25maWcuY29udGFpbmVyLkluZm9z",
            "RW50cnkaTgoKSW5mb3NFbnRyeRILCgNrZXkYASABKAUSLwoFdmFsdWUYAiAB",
            "KAsyIC5za2lsbG1vdmVfY29uZmlnLnNraWxsbW92ZV9kYXRhOgI4AUIHCgVf",
            "bmFtZUILCglfYnVpbGRfaWQqnAIKDkVNb3ZlUmVsYXlUeXBlEhYKEk1vdmVS",
            "ZWxheVR5cGVfTm9uZRAAEhAKDFNraWxsQ21kX1BvcxABEhAKDFNraWxsQ21k",
            "X0RpchACEhMKD1NraWxsQ21kX1RhcmdldBADEhQKEFNraWxsQ21kX0Rpcl9P",
            "cHAQBBIQCgxUcmlnZ2VyUG9zT3AQBRIOCgpUcmlnZ2VyRGlyEAYSDgoKVHJp",
            "Z2dlclBvcxAHEhEKDVRyaWdnZXJFbnRpdHkQCBIQCgxUcmlnZ2VyRGlyT3AQ",
            "CRILCgdUcmFwUG9zEAoSDQoJVHJhcFBvc09wEAsSCgoGQ3VyUG9zEAwSEQoN",
            "Q3VyVHJpZ2dlclBvcxANEhEKDUN1clRyaWdnZXJEaXIQDiozChRFTW92ZVNw",
            "ZWVkQ2hhbmdlVHlwZRILCgdVbmlmb3JtEAASDgoKQWNjZWxlcmF0ZRABKkQK",
            "D0VNb3ZlQ2hlY2tCbG9jaxIXChNNb3ZlQ2hlY2tCbG9ja19Ob25lEAASCgoG",
            "QWx3YXlzEAESDAoIT25seURlc3QQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkillnewConfig.SkillnewConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SkillmoveConfig.EMoveRelayType), typeof(global::SkillmoveConfig.EMoveSpeedChangeType), typeof(global::SkillmoveConfig.EMoveCheckBlock), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkillmoveConfig.skillmove_data), global::SkillmoveConfig.skillmove_data.Parser, new[]{ "Ld", "MoveRelayType", "MoveSpeedChangeType", "KeepDir", "CheckBlock", "IsFly", "IsFlash", "FlyHeight", "Range", "With", "RangeValue", "MoveSpeedType", "MoveSpeedValue", "VerticalTime" }, new[]{ "Ld", "MoveRelayType", "MoveSpeedChangeType", "KeepDir", "CheckBlock", "IsFly", "IsFlash", "FlyHeight", "Range", "With", "RangeValue", "MoveSpeedType", "MoveSpeedValue", "VerticalTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkillmoveConfig.container), global::SkillmoveConfig.container.Parser, new[]{ "Name", "BuildId", "Infos" }, new[]{ "Name", "BuildId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMoveRelayType {
    [pbr::OriginalName("MoveRelayType_None")] MoveRelayTypeNone = 0,
    /// <summary>
    ///施法角色选定的坐标
    /// </summary>
    [pbr::OriginalName("SkillCmd_Pos")] SkillCmdPos = 1,
    /// <summary>
    ///施法角色选定的方向
    /// </summary>
    [pbr::OriginalName("SkillCmd_Dir")] SkillCmdDir = 2,
    /// <summary>
    ///施法角色选定的目标
    /// </summary>
    [pbr::OriginalName("SkillCmd_Target")] SkillCmdTarget = 3,
    /// <summary>
    ///施法角色选定的方向反方向
    /// </summary>
    [pbr::OriginalName("SkillCmd_Dir_Opp")] SkillCmdDirOpp = 4,
    /// <summary>
    ///触发时位置反方向
    /// </summary>
    [pbr::OriginalName("TriggerPosOp")] TriggerPosOp = 5,
    /// <summary>
    ///触发时方向
    /// </summary>
    [pbr::OriginalName("TriggerDir")] TriggerDir = 6,
    /// <summary>
    ///触发时位置
    /// </summary>
    [pbr::OriginalName("TriggerPos")] TriggerPos = 7,
    /// <summary>
    ///触发者位置
    /// </summary>
    [pbr::OriginalName("TriggerEntity")] TriggerEntity = 8,
    /// <summary>
    ///触发方向的反向
    /// </summary>
    [pbr::OriginalName("TriggerDirOp")] TriggerDirOp = 9,
    /// <summary>
    ///陷阱位置
    /// </summary>
    [pbr::OriginalName("TrapPos")] TrapPos = 10,
    /// <summary>
    ///用当前的不科学，先注释掉
    /// </summary>
    [pbr::OriginalName("TrapPosOp")] TrapPosOp = 11,
    /// <summary>
    ///当前坐标
    /// </summary>
    [pbr::OriginalName("CurPos")] CurPos = 12,
    /// <summary>
    ///当前触发者位置
    /// </summary>
    [pbr::OriginalName("CurTriggerPos")] CurTriggerPos = 13,
    /// <summary>
    ///当前触发者方向
    /// </summary>
    [pbr::OriginalName("CurTriggerDir")] CurTriggerDir = 14,
  }

  public enum EMoveSpeedChangeType {
    /// <summary>
    ///勾速的
    /// </summary>
    [pbr::OriginalName("Uniform")] Uniform = 0,
    /// <summary>
    ///加速的
    /// </summary>
    [pbr::OriginalName("Accelerate")] Accelerate = 1,
  }

  public enum EMoveCheckBlock {
    [pbr::OriginalName("MoveCheckBlock_None")] MoveCheckBlockNone = 0,
    /// <summary>
    ///-直检测阻挡
    /// </summary>
    [pbr::OriginalName("Always")] Always = 1,
    /// <summary>
    ///只检测终点是否阻挡
    /// </summary>
    [pbr::OriginalName("OnlyDest")] OnlyDest = 2,
  }

  #endregion

  #region Messages
  public sealed partial class skillmove_data : pb::IMessage<skillmove_data>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<skillmove_data> _parser = new pb::MessageParser<skillmove_data>(() => new skillmove_data());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<skillmove_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkillmoveConfig.SkillmoveConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public skillmove_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public skillmove_data(skillmove_data other) : this() {
      _hasBits0 = other._hasBits0;
      ld_ = other.ld_;
      moveRelayType_ = other.moveRelayType_;
      moveSpeedChangeType_ = other.moveSpeedChangeType_;
      keepDir_ = other.keepDir_;
      checkBlock_ = other.checkBlock_;
      isFly_ = other.isFly_;
      isFlash_ = other.isFlash_;
      flyHeight_ = other.flyHeight_;
      range_ = other.range_;
      with_ = other.with_;
      rangeValue_ = other.rangeValue_;
      moveSpeedType_ = other.moveSpeedType_;
      moveSpeedValue_ = other.moveSpeedValue_;
      verticalTime_ = other.verticalTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public skillmove_data Clone() {
      return new skillmove_data(this);
    }

    /// <summary>Field number for the "ld" field.</summary>
    public const int LdFieldNumber = 1;
    private uint ld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Ld {
      get { if ((_hasBits0 & 1) != 0) { return ld_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        ld_ = value;
      }
    }
    /// <summary>Gets whether the "ld" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLd {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ld" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLd() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "MoveRelayType" field.</summary>
    public const int MoveRelayTypeFieldNumber = 2;
    private global::SkillmoveConfig.EMoveRelayType moveRelayType_;
    /// <summary>
    ///移动终点或方向依赖参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SkillmoveConfig.EMoveRelayType MoveRelayType {
      get { if ((_hasBits0 & 2) != 0) { return moveRelayType_; } else { return global::SkillmoveConfig.EMoveRelayType.MoveRelayTypeNone; } }
      set {
        _hasBits0 |= 2;
        moveRelayType_ = value;
      }
    }
    /// <summary>Gets whether the "MoveRelayType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMoveRelayType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "MoveRelayType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMoveRelayType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "MoveSpeedChangeType" field.</summary>
    public const int MoveSpeedChangeTypeFieldNumber = 3;
    private global::SkillmoveConfig.EMoveSpeedChangeType moveSpeedChangeType_;
    /// <summary>
    ///移动速度变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SkillmoveConfig.EMoveSpeedChangeType MoveSpeedChangeType {
      get { if ((_hasBits0 & 4) != 0) { return moveSpeedChangeType_; } else { return global::SkillmoveConfig.EMoveSpeedChangeType.Uniform; } }
      set {
        _hasBits0 |= 4;
        moveSpeedChangeType_ = value;
      }
    }
    /// <summary>Gets whether the "MoveSpeedChangeType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMoveSpeedChangeType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "MoveSpeedChangeType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMoveSpeedChangeType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "KeepDir" field.</summary>
    public const int KeepDirFieldNumber = 4;
    private bool keepDir_;
    /// <summary>
    /////保持方向不变
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool KeepDir {
      get { if ((_hasBits0 & 8) != 0) { return keepDir_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        keepDir_ = value;
      }
    }
    /// <summary>Gets whether the "KeepDir" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKeepDir {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "KeepDir" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKeepDir() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "CheckBlock" field.</summary>
    public const int CheckBlockFieldNumber = 5;
    private global::SkillmoveConfig.EMoveCheckBlock checkBlock_;
    /// <summary>
    ///检测阻挡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SkillmoveConfig.EMoveCheckBlock CheckBlock {
      get { if ((_hasBits0 & 16) != 0) { return checkBlock_; } else { return global::SkillmoveConfig.EMoveCheckBlock.MoveCheckBlockNone; } }
      set {
        _hasBits0 |= 16;
        checkBlock_ = value;
      }
    }
    /// <summary>Gets whether the "CheckBlock" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCheckBlock {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "CheckBlock" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCheckBlock() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "IsFly" field.</summary>
    public const int IsFlyFieldNumber = 6;
    private bool isFly_;
    /// <summary>
    ///是否飞行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFly {
      get { if ((_hasBits0 & 32) != 0) { return isFly_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        isFly_ = value;
      }
    }
    /// <summary>Gets whether the "IsFly" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsFly {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "IsFly" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsFly() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "IsFlash" field.</summary>
    public const int IsFlashFieldNumber = 7;
    private bool isFlash_;
    /// <summary>
    ///是否闪现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFlash {
      get { if ((_hasBits0 & 64) != 0) { return isFlash_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        isFlash_ = value;
      }
    }
    /// <summary>Gets whether the "IsFlash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsFlash {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "IsFlash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsFlash() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "FlyHeight" field.</summary>
    public const int FlyHeightFieldNumber = 8;
    private int flyHeight_;
    /// <summary>
    ///飞行高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FlyHeight {
      get { if ((_hasBits0 & 128) != 0) { return flyHeight_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        flyHeight_ = value;
      }
    }
    /// <summary>Gets whether the "FlyHeight" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlyHeight {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "FlyHeight" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlyHeight() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "Range" field.</summary>
    public const int RangeFieldNumber = 9;
    private global::SkillnewConfig.ESkillRangeType range_;
    /// <summary>
    ///距离调用值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SkillnewConfig.ESkillRangeType Range {
      get { if ((_hasBits0 & 256) != 0) { return range_; } else { return global::SkillnewConfig.ESkillRangeType.RangeTypeNone; } }
      set {
        _hasBits0 |= 256;
        range_ = value;
      }
    }
    /// <summary>Gets whether the "Range" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRange {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "Range" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRange() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "With" field.</summary>
    public const int WithFieldNumber = 10;
    private global::SkillnewConfig.ESkillRangeType with_;
    /// <summary>
    ///宽度调用值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SkillnewConfig.ESkillRangeType With {
      get { if ((_hasBits0 & 512) != 0) { return with_; } else { return global::SkillnewConfig.ESkillRangeType.RangeTypeNone; } }
      set {
        _hasBits0 |= 512;
        with_ = value;
      }
    }
    /// <summary>Gets whether the "With" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWith {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "With" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWith() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "RangeValue" field.</summary>
    public const int RangeValueFieldNumber = 11;
    private int rangeValue_;
    /// <summary>
    ///自定义距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RangeValue {
      get { if ((_hasBits0 & 1024) != 0) { return rangeValue_; } else { return 0; } }
      set {
        _hasBits0 |= 1024;
        rangeValue_ = value;
      }
    }
    /// <summary>Gets whether the "RangeValue" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRangeValue {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "RangeValue" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRangeValue() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "MoveSpeedType" field.</summary>
    public const int MoveSpeedTypeFieldNumber = 12;
    private global::SkillnewConfig.ESkillMoveSpeedType moveSpeedType_;
    /// <summary>
    ///optional int32 WidthValue ;//自定义宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SkillnewConfig.ESkillMoveSpeedType MoveSpeedType {
      get { if ((_hasBits0 & 2048) != 0) { return moveSpeedType_; } else { return global::SkillnewConfig.ESkillMoveSpeedType.MoveSpeedNone; } }
      set {
        _hasBits0 |= 2048;
        moveSpeedType_ = value;
      }
    }
    /// <summary>Gets whether the "MoveSpeedType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMoveSpeedType {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "MoveSpeedType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMoveSpeedType() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "MoveSpeedValue" field.</summary>
    public const int MoveSpeedValueFieldNumber = 13;
    private int moveSpeedValue_;
    /// <summary>
    ///自定义速度厘米每秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MoveSpeedValue {
      get { if ((_hasBits0 & 4096) != 0) { return moveSpeedValue_; } else { return 0; } }
      set {
        _hasBits0 |= 4096;
        moveSpeedValue_ = value;
      }
    }
    /// <summary>Gets whether the "MoveSpeedValue" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMoveSpeedValue {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "MoveSpeedValue" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMoveSpeedValue() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "VerticalTime" field.</summary>
    public const int VerticalTimeFieldNumber = 14;
    private int verticalTime_;
    /// <summary>
    ///垂直位移总时间毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VerticalTime {
      get { if ((_hasBits0 & 8192) != 0) { return verticalTime_; } else { return 0; } }
      set {
        _hasBits0 |= 8192;
        verticalTime_ = value;
      }
    }
    /// <summary>Gets whether the "VerticalTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVerticalTime {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "VerticalTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVerticalTime() {
      _hasBits0 &= ~8192;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as skillmove_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(skillmove_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ld != other.Ld) return false;
      if (MoveRelayType != other.MoveRelayType) return false;
      if (MoveSpeedChangeType != other.MoveSpeedChangeType) return false;
      if (KeepDir != other.KeepDir) return false;
      if (CheckBlock != other.CheckBlock) return false;
      if (IsFly != other.IsFly) return false;
      if (IsFlash != other.IsFlash) return false;
      if (FlyHeight != other.FlyHeight) return false;
      if (Range != other.Range) return false;
      if (With != other.With) return false;
      if (RangeValue != other.RangeValue) return false;
      if (MoveSpeedType != other.MoveSpeedType) return false;
      if (MoveSpeedValue != other.MoveSpeedValue) return false;
      if (VerticalTime != other.VerticalTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLd) hash ^= Ld.GetHashCode();
      if (HasMoveRelayType) hash ^= MoveRelayType.GetHashCode();
      if (HasMoveSpeedChangeType) hash ^= MoveSpeedChangeType.GetHashCode();
      if (HasKeepDir) hash ^= KeepDir.GetHashCode();
      if (HasCheckBlock) hash ^= CheckBlock.GetHashCode();
      if (HasIsFly) hash ^= IsFly.GetHashCode();
      if (HasIsFlash) hash ^= IsFlash.GetHashCode();
      if (HasFlyHeight) hash ^= FlyHeight.GetHashCode();
      if (HasRange) hash ^= Range.GetHashCode();
      if (HasWith) hash ^= With.GetHashCode();
      if (HasRangeValue) hash ^= RangeValue.GetHashCode();
      if (HasMoveSpeedType) hash ^= MoveSpeedType.GetHashCode();
      if (HasMoveSpeedValue) hash ^= MoveSpeedValue.GetHashCode();
      if (HasVerticalTime) hash ^= VerticalTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLd) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ld);
      }
      if (HasMoveRelayType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MoveRelayType);
      }
      if (HasMoveSpeedChangeType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MoveSpeedChangeType);
      }
      if (HasKeepDir) {
        output.WriteRawTag(32);
        output.WriteBool(KeepDir);
      }
      if (HasCheckBlock) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CheckBlock);
      }
      if (HasIsFly) {
        output.WriteRawTag(48);
        output.WriteBool(IsFly);
      }
      if (HasIsFlash) {
        output.WriteRawTag(56);
        output.WriteBool(IsFlash);
      }
      if (HasFlyHeight) {
        output.WriteRawTag(64);
        output.WriteInt32(FlyHeight);
      }
      if (HasRange) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Range);
      }
      if (HasWith) {
        output.WriteRawTag(80);
        output.WriteEnum((int) With);
      }
      if (HasRangeValue) {
        output.WriteRawTag(88);
        output.WriteInt32(RangeValue);
      }
      if (HasMoveSpeedType) {
        output.WriteRawTag(96);
        output.WriteEnum((int) MoveSpeedType);
      }
      if (HasMoveSpeedValue) {
        output.WriteRawTag(104);
        output.WriteInt32(MoveSpeedValue);
      }
      if (HasVerticalTime) {
        output.WriteRawTag(112);
        output.WriteInt32(VerticalTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLd) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ld);
      }
      if (HasMoveRelayType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MoveRelayType);
      }
      if (HasMoveSpeedChangeType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MoveSpeedChangeType);
      }
      if (HasKeepDir) {
        output.WriteRawTag(32);
        output.WriteBool(KeepDir);
      }
      if (HasCheckBlock) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CheckBlock);
      }
      if (HasIsFly) {
        output.WriteRawTag(48);
        output.WriteBool(IsFly);
      }
      if (HasIsFlash) {
        output.WriteRawTag(56);
        output.WriteBool(IsFlash);
      }
      if (HasFlyHeight) {
        output.WriteRawTag(64);
        output.WriteInt32(FlyHeight);
      }
      if (HasRange) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Range);
      }
      if (HasWith) {
        output.WriteRawTag(80);
        output.WriteEnum((int) With);
      }
      if (HasRangeValue) {
        output.WriteRawTag(88);
        output.WriteInt32(RangeValue);
      }
      if (HasMoveSpeedType) {
        output.WriteRawTag(96);
        output.WriteEnum((int) MoveSpeedType);
      }
      if (HasMoveSpeedValue) {
        output.WriteRawTag(104);
        output.WriteInt32(MoveSpeedValue);
      }
      if (HasVerticalTime) {
        output.WriteRawTag(112);
        output.WriteInt32(VerticalTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLd) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ld);
      }
      if (HasMoveRelayType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MoveRelayType);
      }
      if (HasMoveSpeedChangeType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MoveSpeedChangeType);
      }
      if (HasKeepDir) {
        size += 1 + 1;
      }
      if (HasCheckBlock) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CheckBlock);
      }
      if (HasIsFly) {
        size += 1 + 1;
      }
      if (HasIsFlash) {
        size += 1 + 1;
      }
      if (HasFlyHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlyHeight);
      }
      if (HasRange) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Range);
      }
      if (HasWith) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) With);
      }
      if (HasRangeValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeValue);
      }
      if (HasMoveSpeedType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MoveSpeedType);
      }
      if (HasMoveSpeedValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeedValue);
      }
      if (HasVerticalTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerticalTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(skillmove_data other) {
      if (other == null) {
        return;
      }
      if (other.HasLd) {
        Ld = other.Ld;
      }
      if (other.HasMoveRelayType) {
        MoveRelayType = other.MoveRelayType;
      }
      if (other.HasMoveSpeedChangeType) {
        MoveSpeedChangeType = other.MoveSpeedChangeType;
      }
      if (other.HasKeepDir) {
        KeepDir = other.KeepDir;
      }
      if (other.HasCheckBlock) {
        CheckBlock = other.CheckBlock;
      }
      if (other.HasIsFly) {
        IsFly = other.IsFly;
      }
      if (other.HasIsFlash) {
        IsFlash = other.IsFlash;
      }
      if (other.HasFlyHeight) {
        FlyHeight = other.FlyHeight;
      }
      if (other.HasRange) {
        Range = other.Range;
      }
      if (other.HasWith) {
        With = other.With;
      }
      if (other.HasRangeValue) {
        RangeValue = other.RangeValue;
      }
      if (other.HasMoveSpeedType) {
        MoveSpeedType = other.MoveSpeedType;
      }
      if (other.HasMoveSpeedValue) {
        MoveSpeedValue = other.MoveSpeedValue;
      }
      if (other.HasVerticalTime) {
        VerticalTime = other.VerticalTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ld = input.ReadUInt32();
            break;
          }
          case 16: {
            MoveRelayType = (global::SkillmoveConfig.EMoveRelayType) input.ReadEnum();
            break;
          }
          case 24: {
            MoveSpeedChangeType = (global::SkillmoveConfig.EMoveSpeedChangeType) input.ReadEnum();
            break;
          }
          case 32: {
            KeepDir = input.ReadBool();
            break;
          }
          case 40: {
            CheckBlock = (global::SkillmoveConfig.EMoveCheckBlock) input.ReadEnum();
            break;
          }
          case 48: {
            IsFly = input.ReadBool();
            break;
          }
          case 56: {
            IsFlash = input.ReadBool();
            break;
          }
          case 64: {
            FlyHeight = input.ReadInt32();
            break;
          }
          case 72: {
            Range = (global::SkillnewConfig.ESkillRangeType) input.ReadEnum();
            break;
          }
          case 80: {
            With = (global::SkillnewConfig.ESkillRangeType) input.ReadEnum();
            break;
          }
          case 88: {
            RangeValue = input.ReadInt32();
            break;
          }
          case 96: {
            MoveSpeedType = (global::SkillnewConfig.ESkillMoveSpeedType) input.ReadEnum();
            break;
          }
          case 104: {
            MoveSpeedValue = input.ReadInt32();
            break;
          }
          case 112: {
            VerticalTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ld = input.ReadUInt32();
            break;
          }
          case 16: {
            MoveRelayType = (global::SkillmoveConfig.EMoveRelayType) input.ReadEnum();
            break;
          }
          case 24: {
            MoveSpeedChangeType = (global::SkillmoveConfig.EMoveSpeedChangeType) input.ReadEnum();
            break;
          }
          case 32: {
            KeepDir = input.ReadBool();
            break;
          }
          case 40: {
            CheckBlock = (global::SkillmoveConfig.EMoveCheckBlock) input.ReadEnum();
            break;
          }
          case 48: {
            IsFly = input.ReadBool();
            break;
          }
          case 56: {
            IsFlash = input.ReadBool();
            break;
          }
          case 64: {
            FlyHeight = input.ReadInt32();
            break;
          }
          case 72: {
            Range = (global::SkillnewConfig.ESkillRangeType) input.ReadEnum();
            break;
          }
          case 80: {
            With = (global::SkillnewConfig.ESkillRangeType) input.ReadEnum();
            break;
          }
          case 88: {
            RangeValue = input.ReadInt32();
            break;
          }
          case 96: {
            MoveSpeedType = (global::SkillnewConfig.ESkillMoveSpeedType) input.ReadEnum();
            break;
          }
          case 104: {
            MoveSpeedValue = input.ReadInt32();
            break;
          }
          case 112: {
            VerticalTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class container : pb::IMessage<container>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<container> _parser = new pb::MessageParser<container>(() => new container());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<container> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkillmoveConfig.SkillmoveConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public container() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public container(container other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      buildId_ = other.buildId_;
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public container Clone() {
      return new container(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "build_id" field.</summary>
    public const int BuildIdFieldNumber = 2;
    private int buildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BuildId {
      get { if ((_hasBits0 & 1) != 0) { return buildId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        buildId_ = value;
      }
    }
    /// <summary>Gets whether the "build_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBuildId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "build_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBuildId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 3;
    private static readonly pbc::MapField<int, global::SkillmoveConfig.skillmove_data>.Codec _map_infos_codec
        = new pbc::MapField<int, global::SkillmoveConfig.skillmove_data>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::SkillmoveConfig.skillmove_data.Parser), 26);
    private readonly pbc::MapField<int, global::SkillmoveConfig.skillmove_data> infos_ = new pbc::MapField<int, global::SkillmoveConfig.skillmove_data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::SkillmoveConfig.skillmove_data> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as container);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(container other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (BuildId != other.BuildId) return false;
      if (!Infos.Equals(other.Infos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasBuildId) hash ^= BuildId.GetHashCode();
      hash ^= Infos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasBuildId) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildId);
      }
      infos_.WriteTo(output, _map_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasBuildId) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildId);
      }
      infos_.WriteTo(ref output, _map_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasBuildId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildId);
      }
      size += infos_.CalculateSize(_map_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(container other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasBuildId) {
        BuildId = other.BuildId;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            BuildId = input.ReadInt32();
            break;
          }
          case 26: {
            infos_.AddEntriesFrom(input, _map_infos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            BuildId = input.ReadInt32();
            break;
          }
          case 26: {
            infos_.AddEntriesFrom(ref input, _map_infos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
